diff --git a/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/nativeProxy/NativeProxyCommon.java b/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/nativeProxy/NativeProxyCommon.java
index 6eb1de0..80d1a84 100644
--- a/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/nativeProxy/NativeProxyCommon.java
+++ b/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/nativeProxy/NativeProxyCommon.java
@@ -1,7 +1,11 @@
 package com.swmansion.reanimated.nativeProxy;
 
-import android.os.SystemClock;
-import android.util.Log;
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
 import com.facebook.jni.HybridData;
 import com.facebook.proguard.annotations.DoNotStrip;
 import com.facebook.react.ReactApplication;
@@ -9,6 +13,7 @@ import com.facebook.react.bridge.NativeModule;
 import com.facebook.react.bridge.ReactApplicationContext;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.bridge.ReadableNativeArray;
+import com.facebook.react.common.SystemClock;
 import com.facebook.react.devsupport.interfaces.DevSupportManager;
 import com.facebook.soloader.SoLoader;
 import com.swmansion.common.GestureHandlerStateManager;
@@ -22,11 +27,8 @@ import com.swmansion.reanimated.layoutReanimation.AnimationsManager;
 import com.swmansion.reanimated.layoutReanimation.LayoutAnimations;
 import com.swmansion.reanimated.sensor.ReanimatedSensorContainer;
 import com.swmansion.reanimated.sensor.ReanimatedSensorType;
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
+
+import android.util.Log;
 
 public abstract class NativeProxyCommon {
   static {
@@ -51,11 +53,9 @@ public abstract class NativeProxyCommon {
 
     GestureHandlerStateManager tempHandlerStateManager;
     try {
-      Class<NativeModule> gestureHandlerModuleClass =
-          (Class<NativeModule>)
-              Class.forName("com.swmansion.gesturehandler.react.RNGestureHandlerModule");
-      tempHandlerStateManager =
-          (GestureHandlerStateManager) context.getNativeModule(gestureHandlerModuleClass);
+      Class<NativeModule> gestureHandlerModuleClass = (Class<NativeModule>) Class
+          .forName("com.swmansion.gesturehandler.react.RNGestureHandlerModule");
+      tempHandlerStateManager = (GestureHandlerStateManager) context.getNativeModule(gestureHandlerModuleClass);
     } catch (ClassCastException | ClassNotFoundException e) {
       tempHandlerStateManager = null;
     }
@@ -76,11 +76,10 @@ public abstract class NativeProxyCommon {
   private void addDevMenuOption() {
     // In Expo, `ApplicationContext` is not an instance of `ReactApplication`
     if (mContext.get().getApplicationContext() instanceof ReactApplication) {
-      final DevSupportManager devSupportManager =
-          ((ReactApplication) mContext.get().getApplicationContext())
-              .getReactNativeHost()
-              .getReactInstanceManager()
-              .getDevSupportManager();
+      final DevSupportManager devSupportManager = ((ReactApplication) mContext.get().getApplicationContext())
+          .getReactNativeHost()
+          .getReactInstanceManager()
+          .getDevSupportManager();
 
       devSupportManager.addCustomDevOption(
           "Toggle slow animations (Reanimated)", this::toggleSlowAnimations);
@@ -88,39 +87,39 @@ public abstract class NativeProxyCommon {
   }
 
   @DoNotStrip
-  private void requestRender(AnimationFrameCallback callback) {
+  public void requestRender(AnimationFrameCallback callback) {
     mNodesManager.postOnAnimation(callback);
   }
 
   @DoNotStrip
-  private void updateProps(int viewTag, Map<String, Object> props) {
+  public void updateProps(int viewTag, Map<String, Object> props) {
     mNodesManager.updateProps(viewTag, props);
   }
 
   @DoNotStrip
-  private void synchronouslyUpdateUIProps(int viewTag, ReadableMap uiProps) {
+  public void synchronouslyUpdateUIProps(int viewTag, ReadableMap uiProps) {
     mNodesManager.synchronouslyUpdateUIProps(viewTag, uiProps);
   }
 
   @DoNotStrip
-  private String obtainProp(int viewTag, String propName) {
+  public String obtainProp(int viewTag, String propName) {
     return mNodesManager.obtainProp(viewTag, propName);
   }
 
   @DoNotStrip
-  private void scrollTo(int viewTag, double x, double y, boolean animated) {
+  public void scrollTo(int viewTag, double x, double y, boolean animated) {
     mNodesManager.scrollTo(viewTag, x, y, animated);
   }
 
   @DoNotStrip
-  private void setGestureState(int handlerTag, int newState) {
+  public void setGestureState(int handlerTag, int newState) {
     if (gestureHandlerStateManager != null) {
       gestureHandlerStateManager.setGestureHandlerState(handlerTag, newState);
     }
   }
 
   @DoNotStrip
-  private long getCurrentTime() {
+  public long getCurrentTime() {
     if (slowAnimationsEnabled) {
       final long ANIMATIONS_DRAG_FACTOR = 10;
       return this.firstUptime
@@ -131,12 +130,12 @@ public abstract class NativeProxyCommon {
   }
 
   @DoNotStrip
-  private float[] measure(int viewTag) {
+  public float[] measure(int viewTag) {
     return mNodesManager.measure(viewTag);
   }
 
   @DoNotStrip
-  private void configureProps(ReadableNativeArray uiProps, ReadableNativeArray nativeProps) {
+  public void configureProps(ReadableNativeArray uiProps, ReadableNativeArray nativeProps) {
     Set<String> uiPropsSet = convertProps(uiProps);
     Set<String> nativePropsSet = convertProps(nativeProps);
     mNodesManager.configureProps(uiPropsSet, nativePropsSet);
@@ -152,31 +151,31 @@ public abstract class NativeProxyCommon {
   }
 
   @DoNotStrip
-  private void registerEventHandler(EventHandler handler) {
+  public void registerEventHandler(EventHandler handler) {
     handler.mCustomEventNamesResolver = mNodesManager.getEventNameResolver();
     mNodesManager.registerEventHandler(handler);
   }
 
   @DoNotStrip
-  private int registerSensor(int sensorType, int interval, SensorSetter setter) {
+  public int registerSensor(int sensorType, int interval, SensorSetter setter) {
     return reanimatedSensorContainer.registerSensor(
         ReanimatedSensorType.getInstanceById(sensorType), interval, setter);
   }
 
   @DoNotStrip
-  private void unregisterSensor(int sensorId) {
+  public void unregisterSensor(int sensorId) {
     reanimatedSensorContainer.unregisterSensor(sensorId);
   }
 
   @DoNotStrip
-  private int subscribeForKeyboardEvents(
+  public int subscribeForKeyboardEvents(
       KeyboardEventDataUpdater keyboardEventDataUpdater, boolean isStatusBarTranslucent) {
     return reanimatedKeyboardEventListener.subscribeForKeyboardEvents(
         keyboardEventDataUpdater, isStatusBarTranslucent);
   }
 
   @DoNotStrip
-  private void unsubscribeFromKeyboardEvents(int listenerId) {
+  public void unsubscribeFromKeyboardEvents(int listenerId) {
     reanimatedKeyboardEventListener.unsubscribeFromKeyboardEvents(listenerId);
   }
 
@@ -194,12 +193,11 @@ public abstract class NativeProxyCommon {
     }
     mNodesManager = mContext.get().getNativeModule(ReanimatedModule.class).getNodesManager();
 
-    AnimationsManager animationsManager =
-        mContext
-            .get()
-            .getNativeModule(ReanimatedModule.class)
-            .getNodesManager()
-            .getAnimationsManager();
+    AnimationsManager animationsManager = mContext
+        .get()
+        .getNativeModule(ReanimatedModule.class)
+        .getNodesManager()
+        .getAnimationsManager();
 
     animationsManager.setNativeMethods(NativeProxy.createNativeMethodsHolder(layoutAnimations));
   }
